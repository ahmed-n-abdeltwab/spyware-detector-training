import os
import shutil
import json
import pickle
from datetime import datetime
from typing import Dict, Any
from src.utils.directory import ensure_directory


class ArtifactExporter:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.config["output_dir"] = os.path.abspath(config.get("output_dir", "release"))

        # Ensure directory exists with write permissions
        os.makedirs(os.path.join(self.config["output_dir"], "latest"), exist_ok=True)
        os.chmod(os.path.join(self.config["output_dir"], "latest"), 0o777)

    def export_training_artifacts(
        self, training_results: Dict[str, Any]
    ) -> Dict[str, str]:
        """Export all artifacts to release/latest directory"""
        try:
            release_dir = os.path.join(self.config["output_dir"], "latest")

            # Clear existing contents
            shutil.rmtree(release_dir, ignore_errors=True)
            os.makedirs(release_dir, exist_ok=True)
            os.chmod(release_dir, 0o777)

            exported_files = {}
            artifacts = training_results["artifacts"]

            # Export model files
            model_files = {
                "model.pkl": artifacts.get("model"),
                "metadata.json": artifacts.get("metadata"),
                "metrics.json": artifacts.get("metrics", {}),
                "feature_selector.pkl": artifacts.get("feature_selector"),
                "scaler.pkl": artifacts.get("scaler"),
                "selected_features.json": artifacts.get("selected_features"),
            }

            for filename, src in model_files.items():
                if src and os.path.exists(src):
                    dest = os.path.join(release_dir, filename)
                    shutil.copy2(src, dest)
                    os.chmod(dest, 0o666)  # Ensure writable
                    exported_files[filename.split(".")[0]] = dest
                elif filename == "metrics.json":
                    # Create default metrics if missing
                    self._create_default_metrics(release_dir, training_results)
                    exported_files["metrics"] = os.path.join(release_dir, filename)

            # Create supporting files
            self._create_feature_structure(release_dir, training_results)
            self._create_package_info(release_dir, exported_files)

            return {k: os.path.abspath(v) for k, v in exported_files.items()}

        except Exception as e:
            print(f"Artifact export failed: {str(e)}")
            raise

    def _create_default_metrics(
        self, release_dir: str, training_results: Dict[str, Any]
    ):
        default_metrics = training_results.get(
            "metrics",
            {
                "accuracy": 0,
                "precision": 0,
                "recall": 0,
                "f1": 0,
                "warning": "Metrics not properly saved during training",
            },
        )
        metrics_path = os.path.join(release_dir, "metrics.json")
        with open(metrics_path, "w") as f:
            json.dump(default_metrics, f, indent=2)
        os.chmod(metrics_path, 0o666)

    def _create_feature_structure(
        self, release_dir: str, training_results: Dict[str, Any]
    ):
        feature_structure = {
            "feature_names": training_results.get("selected_features", []),
            "required_features": len(training_results.get("selected_features", [])),
            "version": datetime.now().strftime("%Y%m%d_%H%M%S"),
        }
        features_path = os.path.join(release_dir, "feature_structure.json")
        with open(features_path, "w") as f:
            json.dump(feature_structure, f, indent=2)
        os.chmod(features_path, 0o666)

    def _create_package_info(self, release_dir: str, files: Dict[str, str]):
        package_info = {
            "created_at": datetime.now().isoformat(),
            "contents": {k: os.path.basename(v) for k, v in files.items()},
            "notes": "Automatically generated by spyware-detector-training pipeline",
        }
        info_path = os.path.join(release_dir, "package_info.json")
        with open(info_path, "w") as f:
            json.dump(package_info, f, indent=2)
        os.chmod(info_path, 0o666)
